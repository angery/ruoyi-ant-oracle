{"remainingRequest":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/views/account/settings/Custom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/views/account/settings/Custom.vue","mtime":1581492640523},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js","mtime":1580791766093},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/vue-loader/lib/index.js","mtime":1580791779864}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { updateTheme, colorList } from '@/components/SettingDrawer/settingConfig'\nimport { Switch as ASwitch, List as AList } from 'ant-design-vue'\nimport { mixin } from '@/utils/mixin'\n\nconst AListItem = AList.Item\nconst Meta = AListItem.Meta\n\nexport default {\n  components: {\n    AListItem,\n    AList,\n    ASwitch,\n    Meta\n  },\n  mixins: [mixin],\n  data () {\n    return {\n      colorList\n    }\n  },\n  filters: {\n    themeFilter (theme) {\n      const themeMap = {\n        'dark': '暗色',\n        'light': '白色'\n      }\n      return themeMap[theme]\n    }\n  },\n  methods: {\n    colorFilter (color) {\n      const c = colorList.find(o => o.color === color)\n      return c && c.key\n    },\n\n    onChange (checked) {\n      if (checked) {\n        this.$store.dispatch('ToggleTheme', 'dark')\n      } else {\n        this.$store.dispatch('ToggleTheme', 'light')\n      }\n    },\n    changeColor (color) {\n      if (this.primaryColor !== color) {\n        this.$store.dispatch('ToggleColor', color)\n        updateTheme(color)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Custom.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Custom.vue","sourceRoot":"src/views/account/settings","sourcesContent":["<template>\n\n  <a-list itemLayout=\"horizontal\">\n    <a-list-item>\n      <a-list-item-meta>\n        <a slot=\"title\">风格配色</a>\n        <span slot=\"description\">\n          整体风格配色设置\n        </span>\n      </a-list-item-meta>\n      <div slot=\"actions\">\n        <a-switch checkedChildren=\"暗色\" unCheckedChildren=\"白色\" :defaultChecked=\"navTheme=== 'dark'\" @change=\"onChange\" />\n      </div>\n    </a-list-item>\n    <a-list-item>\n      <a-list-item-meta>\n        <a slot=\"title\">主题色</a>\n        <span slot=\"description\">\n          页面风格配色： <a>{{ this.colorFilter(this.primaryColor) }}</a>\n        </span>\n      </a-list-item-meta>\n      <div style=\"height: 20px\">\n        <a-tooltip class=\"setting-drawer-theme-color-colorBlock\" v-for=\"(item, index) in colorList\" :key=\"index\">\n          <template slot=\"title\">\n            {{ item.key }}\n          </template>\n          <a-tag :color=\"item.color\" @click=\"changeColor(item.color)\">\n            <a-icon type=\"check\" v-if=\"item.color === primaryColor\"></a-icon>\n          </a-tag>\n        </a-tooltip>\n      </div>\n\n    </a-list-item>\n  </a-list>\n\n</template>\n\n<script>\nimport { updateTheme, colorList } from '@/components/SettingDrawer/settingConfig'\nimport { Switch as ASwitch, List as AList } from 'ant-design-vue'\nimport { mixin } from '@/utils/mixin'\n\nconst AListItem = AList.Item\nconst Meta = AListItem.Meta\n\nexport default {\n  components: {\n    AListItem,\n    AList,\n    ASwitch,\n    Meta\n  },\n  mixins: [mixin],\n  data () {\n    return {\n      colorList\n    }\n  },\n  filters: {\n    themeFilter (theme) {\n      const themeMap = {\n        'dark': '暗色',\n        'light': '白色'\n      }\n      return themeMap[theme]\n    }\n  },\n  methods: {\n    colorFilter (color) {\n      const c = colorList.find(o => o.color === color)\n      return c && c.key\n    },\n\n    onChange (checked) {\n      if (checked) {\n        this.$store.dispatch('ToggleTheme', 'dark')\n      } else {\n        this.$store.dispatch('ToggleTheme', 'light')\n      }\n    },\n    changeColor (color) {\n      if (this.primaryColor !== color) {\n        this.$store.dispatch('ToggleColor', color)\n        updateTheme(color)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n\n    .setting-drawer-theme-color-colorBlock {\n      width: 20px;\n      height: 20px;\n      border-radius: 2px;\n      float: left;\n      cursor: pointer;\n      margin-right: 8px;\n      padding-left: 0px;\n      padding-right: 0px;\n      text-align: center;\n      color: #fff;\n      font-weight: 700;\n\n      i {\n        font-size: 14px;\n      }\n    }\n\n</style>\n"]}]}