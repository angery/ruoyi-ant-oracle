{"remainingRequest":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/views/system/UserList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/views/system/UserList.vue","mtime":1581495955935},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js","mtime":1580791766093},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/vue-loader/lib/index.js","mtime":1580791779864}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Tree } from 'ant-design-vue'\nimport { STable, STree } from '@/components'\nimport { getUserList, getDeptList, delUser, changUserStatus } from '@/api/system'\nimport UserModal from './modules/UserModal'\nimport UserPwdModal from './modules/UserPwdModal'\nimport pick from 'lodash.pick'\nimport { checkPermission } from '@/utils/permissions'\nexport default {\n  name: 'TableList',\n  components: {\n    Tree,\n    STree,\n    STable,\n    UserModal,\n    UserPwdModal\n  },\n  data () {\n    return {\n      description: '列表使用场景：后台管理中的权限管理以及角色管理，可用于基于 RBAC 设计的角色权限控制，颗粒度细到每一个操作类型。',\n      visible: false,\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 5 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 }\n      },\n      mdl: {},\n      // 高级搜索 展开/关闭\n      advanced: false,\n      // 查询参数\n      queryParam: {},\n      // 表头\n      columns: [\n        {\n          title: '用户名',\n          dataIndex: 'loginName'\n        },\n        {\n          title: '昵称',\n          dataIndex: 'userName'\n        },\n        {\n          title: '状态',\n          dataIndex: 'status',\n          scopedSlots: { customRender: 'status' }\n        },\n        {\n          title: '创建时间',\n          dataIndex: 'createTime',\n          sorter: true\n        }, {\n          title: '操作',\n          width: '200px',\n          dataIndex: 'action',\n          scopedSlots: { customRender: 'action' }\n        }\n      ],\n      // 加载数据方法 必须为 Promise 对象\n      loadData: parameter => {\n        return getUserList(Object.assign(parameter, this.queryParam))\n          .then(res => {\n            console.log('getUserList', res)\n            return res\n          })\n      },\n      searchValue: '',\n      deptTree: [],\n      expandedKeys: [],\n      dataList: [],\n      autoExpandParent: true,\n      selectedRowKeys: [],\n      selectedRows: [],\n      addEnable: checkPermission('system:user:add'),\n      editEnabel: checkPermission('system:user:edit'),\n      resetPwdEnabel: checkPermission('system:user:resetPwd'),\n      removeEnable: checkPermission('system:user:remove')\n    }\n  },\n  created () {\n    getDeptList().then(res => {\n      const data = res.rows\n      this.buildtree(data, this.deptTree, '0')\n      this.expandedKeys = data.map(m => m.parentId)\n      this.dataList = data.map(m => {\n        return { key: m.deptId, title: m.deptName }\n      })\n    })\n  },\n  methods: {\n    onSelectChange (selectedRowKeys) {\n      console.log('selectedRowKeys changed: ', selectedRowKeys)\n      this.selectedRowKeys = selectedRowKeys\n    },\n    handleEdit (record) {\n      this.$refs.modal.edit(record)\n    },\n    resetPwd (record) {\n      this.$refs.pwdmodal.edit(record)\n    },\n    onChange (selectedRowKeys, selectedRows) {\n      this.selectedRowKeys = selectedRowKeys\n      this.selectedRows = selectedRows\n    },\n    handleOk () {\n      this.$refs.table.refresh()\n      console.log('handleSaveOk')\n    },\n    delByIds (ids) {\n      this.$confirm({\n        title: '提示',\n        content: '确定删除该条记录吗 ?',\n        onOk: () => {\n          delUser({ ids: ids.join(',') }).then(res => {\n            if (res.code === 0) {\n              this.$message.success(`删除成功`)\n              this.handleOk()\n            } else {\n              this.$message.error(res.msg)\n            }\n            // const difference = new Set(this.selectedRowKeys.filter(x => !new Set(ids).has(x)))\n            // this.selectedRowKeys = Array.from(difference)\n            this.selectedRowKeys = []\n          })\n        },\n        onCancel () {\n        }\n      })\n    },\n    onChangeStatus (record) {\n      record.status = record.status === '0' ? '1' : '0'\n      changUserStatus(pick(record, 'userId', 'status')).then(res => {\n        if (res.code === 0) {\n          this.$message.success('保存成功')\n        } else {\n          this.$message.error(res.msg)\n        }\n      })\n      // 发送状态到服务器\n    },\n    buildtree (list, arr, parentId) {\n      list.forEach(item => {\n        if (item.parentId === parentId) {\n          var child = {\n            key: item.deptId,\n            value: item.deptId, // value是给modal的select用的，2者属性不一样\n            title: item.deptName,\n            scopedSlots: { title: 'title' },\n            children: []\n          }\n          this.buildtree(list, child.children, item.deptId)\n          if (child.children.length === 0) { delete child.children }\n          arr.push(child)\n        }\n      })\n    },\n    // 下面是树相关方法\n    onExpand  (expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    emitEmpty () {\n      this.$refs.searchInput.focus()\n      this.searchValue = ''\n      this.searchDept()\n    },\n    getParentKey (key, tree) {\n      let parentKey\n      for (let i = 0; i < tree.length; i++) {\n        const node = tree[i]\n        if (node.children) {\n          if (node.children.some(item => item.key === key)) {\n            parentKey = node.key\n          } else if (this.getParentKey(key, node.children)) {\n            parentKey = this.getParentKey(key, node.children)\n          }\n        }\n      }\n      return parentKey\n    },\n    handleChange (e) {\n      this.searchDept()\n    },\n    searchDept () {\n      const value = this.searchValue\n      const expandedKeys = this.dataList.map((item) => {\n        if (item.title.indexOf(value) > -1) {\n          const parentKey = this.getParentKey(item.key, this.deptTree)\n          return parentKey\n        }\n        return null\n      }).filter((item, i, self) => item && self.indexOf(item) === i)\n      Object.assign(this, {\n        expandedKeys,\n        autoExpandParent: true\n      })\n    },\n    handleSelect (selectedKeys, info) {\n      this.queryParam = {\n        deptId: selectedKeys[0]\n      }\n      this.$refs.table.refresh(true)\n    }\n  },\n  watch: {\n    /*\n      'selectedRows': function (selectedRows) {\n        this.needTotalList = this.needTotalList.map(item => {\n          return {\n            ...item,\n            total: selectedRows.reduce( (sum, val) => {\n              return sum + val[item.dataIndex]\n            }, 0)\n          }\n        })\n      }\n      */\n  }\n}\n",{"version":3,"sources":["UserList.vue"],"names":[],"mappingsfile":"UserList.vue","sourceRoot":"src/views/system","sourcesContent":["<template>\n  <a-card :bordered=\"false\">\n    <a-row :gutter=\"8\">\n      <a-col :span=\"5\">\n        <a-input style=\"margin-bottom: 8px\" placeholder=\"搜索部门\" v-model=\"searchValue\" @change=\"handleChange\" ref=\"searchInput\" >\n          <a-icon slot=\"prefix\" type=\"search\" />\n          <a-icon v-if=\"searchValue\" slot=\"suffix\" type=\"close-circle\" @click=\"emitEmpty\" />\n        </a-input>\n        <a-tree\n          v-if=\"deptTree.length>0\"\n          :treeData=\"deptTree\"\n          @expand=\"onExpand\"\n          :expandedKeys=\"expandedKeys\"\n          :autoExpandParent=\"autoExpandParent\"\n          @select=\"handleSelect\">\n          <template slot=\"title\" slot-scope=\"{title}\">\n            <span v-if=\"title.indexOf(searchValue) > -1\">\n              {{ title.substr(0, title.indexOf(searchValue)) }}\n              <span style=\"color: red\">{{ searchValue }}</span>\n              {{ title.substr(title.indexOf(searchValue) + searchValue.length) }}\n            </span>\n            <span v-else>{{ title }}</span>\n          </template>\n        </a-tree>\n      </a-col>\n      <a-col :span=\"19\">\n        <div class=\"table-page-search-wrapper\">\n          <a-form layout=\"inline\">\n            <a-row :gutter=\"48\">\n              <a-col :md=\"5\" d:sm=\"15\">\n                <a-form-item label=\"用户名\">\n                  <a-input placeholder=\"请输入\" v-model=\"queryParam.loginName\"/>\n                </a-form-item>\n              </a-col>\n              <a-col :md=\"5\" d:sm=\"15\">\n                <a-form-item label=\"状态\">\n                  <a-select placeholder=\"请选择\" v-model=\"queryParam.status\" >\n                    <a-select-option :value=\"''\">全部</a-select-option>\n                    <a-select-option :value=\"'0'\">正常</a-select-option>\n                    <a-select-option :value=\"'1'\">禁用</a-select-option>\n                  </a-select>\n                </a-form-item>\n              </a-col>\n              <a-col :md=\"5\" d:sm=\"15\">\n                <span class=\"table-page-search-submitButtons\">\n                  <a-button type=\"primary\" @click=\"$refs.table.refresh(true)\">查询</a-button>\n                  <a-button style=\"margin-left: 8px\" @click=\"() => queryParam = {}\">重置</a-button>\n                </span>\n              </a-col>\n            </a-row>\n          </a-form>\n        </div>\n        <div class=\"table-operator\">\n          <!-- <a-button type=\"primary\" icon=\"plus\" @click=\"$refs.modal.add()\">新建</a-button>\n      <a-dropdown v-if=\"selectedRowKeys.length > 0\"> -->\n          <a-button v-if=\"addEnable\" type=\"primary\" icon=\"plus\" @click=\"$refs.modal.add()\">新建</a-button>\n          <a-dropdown v-if=\"removeEnable&& selectedRowKeys.length > 0\">\n            <!-- <a-menu slot=\"overlay\">\n          <a-menu-item key=\"1\"><a-icon type=\"delete\" />删除</a-menu-item>\n          <a-menu-item key=\"2\"><a-icon type=\"lock\" />禁用</a-menu-item>\n        </a-menu>\n        <a-button style=\"margin-left: 8px\">\n          批量操作 <a-icon type=\"down\" />\n        </a-button> -->\n            <a-button type=\"danger\" icon=\"delete\" @click=\"delByIds(selectedRowKeys)\">删除</a-button>\n          </a-dropdown>\n        </div>\n        <s-table\n          size=\"default\"\n          ref=\"table\"\n          rowKey=\"userId\"\n          :rowSelection=\"{selectedRowKeys: selectedRowKeys, onChange: onSelectChange}\"\n          :columns=\"columns\"\n          :data=\"loadData\"\n        >\n          <span slot=\"status\" slot-scope=\"text,record\">\n            <a-switch :checked=\"record.status=='0'\" @change=\"onChangeStatus(record)\"/>\n          </span>\n          <span slot=\"action\" slot-scope=\"text, record\">\n            <a v-if=\"editEnabel\" @click=\"handleEdit(record)\">编辑</a>\n            <a-divider type=\"vertical\" />\n            <a v-if=\"removeEnable\" @click=\"delByIds([record.userId])\">删除</a>\n            <a-divider type=\"vertical\" />\n            <a v-if=\"resetPwdEnabel\" @click=\"resetPwd(record)\">重置密码</a>\n          </span>\n        </s-table>\n      </a-col>\n    </a-row>\n    <user-modal ref=\"modal\" @ok=\"handleOk\" :deptTree=\"deptTree\"/>\n    <user-pwd-modal ref=\"pwdmodal\"/>\n  </a-card>\n</template>\n\n<script>\nimport { Tree } from 'ant-design-vue'\nimport { STable, STree } from '@/components'\nimport { getUserList, getDeptList, delUser, changUserStatus } from '@/api/system'\nimport UserModal from './modules/UserModal'\nimport UserPwdModal from './modules/UserPwdModal'\nimport pick from 'lodash.pick'\nimport { checkPermission } from '@/utils/permissions'\nexport default {\n  name: 'TableList',\n  components: {\n    Tree,\n    STree,\n    STable,\n    UserModal,\n    UserPwdModal\n  },\n  data () {\n    return {\n      description: '列表使用场景：后台管理中的权限管理以及角色管理，可用于基于 RBAC 设计的角色权限控制，颗粒度细到每一个操作类型。',\n      visible: false,\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 5 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 }\n      },\n      mdl: {},\n      // 高级搜索 展开/关闭\n      advanced: false,\n      // 查询参数\n      queryParam: {},\n      // 表头\n      columns: [\n        {\n          title: '用户名',\n          dataIndex: 'loginName'\n        },\n        {\n          title: '昵称',\n          dataIndex: 'userName'\n        },\n        {\n          title: '状态',\n          dataIndex: 'status',\n          scopedSlots: { customRender: 'status' }\n        },\n        {\n          title: '创建时间',\n          dataIndex: 'createTime',\n          sorter: true\n        }, {\n          title: '操作',\n          width: '200px',\n          dataIndex: 'action',\n          scopedSlots: { customRender: 'action' }\n        }\n      ],\n      // 加载数据方法 必须为 Promise 对象\n      loadData: parameter => {\n        return getUserList(Object.assign(parameter, this.queryParam))\n          .then(res => {\n            console.log('getUserList', res)\n            return res\n          })\n      },\n      searchValue: '',\n      deptTree: [],\n      expandedKeys: [],\n      dataList: [],\n      autoExpandParent: true,\n      selectedRowKeys: [],\n      selectedRows: [],\n      addEnable: checkPermission('system:user:add'),\n      editEnabel: checkPermission('system:user:edit'),\n      resetPwdEnabel: checkPermission('system:user:resetPwd'),\n      removeEnable: checkPermission('system:user:remove')\n    }\n  },\n  created () {\n    getDeptList().then(res => {\n      const data = res.rows\n      this.buildtree(data, this.deptTree, '0')\n      this.expandedKeys = data.map(m => m.parentId)\n      this.dataList = data.map(m => {\n        return { key: m.deptId, title: m.deptName }\n      })\n    })\n  },\n  methods: {\n    onSelectChange (selectedRowKeys) {\n      console.log('selectedRowKeys changed: ', selectedRowKeys)\n      this.selectedRowKeys = selectedRowKeys\n    },\n    handleEdit (record) {\n      this.$refs.modal.edit(record)\n    },\n    resetPwd (record) {\n      this.$refs.pwdmodal.edit(record)\n    },\n    onChange (selectedRowKeys, selectedRows) {\n      this.selectedRowKeys = selectedRowKeys\n      this.selectedRows = selectedRows\n    },\n    handleOk () {\n      this.$refs.table.refresh()\n      console.log('handleSaveOk')\n    },\n    delByIds (ids) {\n      this.$confirm({\n        title: '提示',\n        content: '确定删除该条记录吗 ?',\n        onOk: () => {\n          delUser({ ids: ids.join(',') }).then(res => {\n            if (res.code === 0) {\n              this.$message.success(`删除成功`)\n              this.handleOk()\n            } else {\n              this.$message.error(res.msg)\n            }\n            // const difference = new Set(this.selectedRowKeys.filter(x => !new Set(ids).has(x)))\n            // this.selectedRowKeys = Array.from(difference)\n            this.selectedRowKeys = []\n          })\n        },\n        onCancel () {\n        }\n      })\n    },\n    onChangeStatus (record) {\n      record.status = record.status === '0' ? '1' : '0'\n      changUserStatus(pick(record, 'userId', 'status')).then(res => {\n        if (res.code === 0) {\n          this.$message.success('保存成功')\n        } else {\n          this.$message.error(res.msg)\n        }\n      })\n      // 发送状态到服务器\n    },\n    buildtree (list, arr, parentId) {\n      list.forEach(item => {\n        if (item.parentId === parentId) {\n          var child = {\n            key: item.deptId,\n            value: item.deptId, // value是给modal的select用的，2者属性不一样\n            title: item.deptName,\n            scopedSlots: { title: 'title' },\n            children: []\n          }\n          this.buildtree(list, child.children, item.deptId)\n          if (child.children.length === 0) { delete child.children }\n          arr.push(child)\n        }\n      })\n    },\n    // 下面是树相关方法\n    onExpand  (expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    emitEmpty () {\n      this.$refs.searchInput.focus()\n      this.searchValue = ''\n      this.searchDept()\n    },\n    getParentKey (key, tree) {\n      let parentKey\n      for (let i = 0; i < tree.length; i++) {\n        const node = tree[i]\n        if (node.children) {\n          if (node.children.some(item => item.key === key)) {\n            parentKey = node.key\n          } else if (this.getParentKey(key, node.children)) {\n            parentKey = this.getParentKey(key, node.children)\n          }\n        }\n      }\n      return parentKey\n    },\n    handleChange (e) {\n      this.searchDept()\n    },\n    searchDept () {\n      const value = this.searchValue\n      const expandedKeys = this.dataList.map((item) => {\n        if (item.title.indexOf(value) > -1) {\n          const parentKey = this.getParentKey(item.key, this.deptTree)\n          return parentKey\n        }\n        return null\n      }).filter((item, i, self) => item && self.indexOf(item) === i)\n      Object.assign(this, {\n        expandedKeys,\n        autoExpandParent: true\n      })\n    },\n    handleSelect (selectedKeys, info) {\n      this.queryParam = {\n        deptId: selectedKeys[0]\n      }\n      this.$refs.table.refresh(true)\n    }\n  },\n  watch: {\n    /*\n      'selectedRows': function (selectedRows) {\n        this.needTotalList = this.needTotalList.map(item => {\n          return {\n            ...item,\n            total: selectedRows.reduce( (sum, val) => {\n              return sum + val[item.dataIndex]\n            }, 0)\n          }\n        })\n      }\n      */\n  }\n}\n</script>\n"]}]}