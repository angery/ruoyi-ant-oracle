{"remainingRequest":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/components/Ellipsis/Ellipsis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/components/Ellipsis/Ellipsis.vue","mtime":1581492640481},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js","mtime":1580791766093},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/vue-loader/lib/index.js","mtime":1580791779864}],"contextDependencies":[],"result":["\nimport { Tooltip } from 'ant-design-vue'\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/util'\n/*\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n    const TooltipOverlayStyle = {\n      overflowWrap: 'break-word',\n      wordWrap: 'break-word',\n    };\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom (str, fullLength) {\n      return (\n        <span>{ cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '') }</span>\n      )\n    },\n    getTooltip (fullStr, fullLength) {\n      return (\n        <Tooltip>\n          <template slot=\"title\">{ fullStr }</template>\n          { this.getStrDom(fullStr, fullLength) }\n        </Tooltip>\n      )\n    }\n  },\n  render () {\n    const { tooltip, length } = this.$props\n    const str = this.$slots.default.map(vNode => vNode.text).join('')\n    const fullLength = getStrFullLength(str)\n    const strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength)\n    return (\n      strDom\n    )\n  }\n}\n",{"version":3,"sources":["Ellipsis.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Ellipsis.vue","sourceRoot":"src/components/Ellipsis","sourcesContent":["<script>\nimport { Tooltip } from 'ant-design-vue'\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/util'\n/*\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n    const TooltipOverlayStyle = {\n      overflowWrap: 'break-word',\n      wordWrap: 'break-word',\n    };\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom (str, fullLength) {\n      return (\n        <span>{ cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '') }</span>\n      )\n    },\n    getTooltip (fullStr, fullLength) {\n      return (\n        <Tooltip>\n          <template slot=\"title\">{ fullStr }</template>\n          { this.getStrDom(fullStr, fullLength) }\n        </Tooltip>\n      )\n    }\n  },\n  render () {\n    const { tooltip, length } = this.$props\n    const str = this.$slots.default.map(vNode => vNode.text).join('')\n    const fullLength = getStrFullLength(str)\n    const strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength)\n    return (\n      strDom\n    )\n  }\n}\n</script>\n"]}]}