{"remainingRequest":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/components/MultiTab/MultiTab.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/components/MultiTab/MultiTab.vue","mtime":1581492640488},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js","mtime":1580791766093},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/vue-loader/lib/index.js","mtime":1580791779864}],"contextDependencies":[],"result":["\nimport events from './events'\n\nexport default {\n  name: 'MultiTab',\n  data () {\n    return {\n      fullPathList: [],\n      pages: [],\n      activeKey: '',\n      newTabIndex: 0\n    }\n  },\n  created () {\n    // bind event\n    events.$on('open', val => {\n      if (!val) {\n        throw new Error(`multi-tab: open tab ${val} err`)\n      }\n      this.activeKey = val\n    }).$on('close', val => {\n      if (!val) {\n        this.closeThat(this.activeKey)\n        return\n      }\n      this.closeThat(val)\n    })\n\n    this.pages.push(this.$route)\n    this.fullPathList.push(this.$route.fullPath)\n    this.selectedLastPath()\n  },\n  methods: {\n    onEdit (targetKey, action) {\n      this[action](targetKey)\n    },\n    remove (targetKey) {\n      this.pages = this.pages.filter(page => page.fullPath !== targetKey)\n      this.fullPathList = this.fullPathList.filter(path => path !== targetKey)\n      // 判断当前标签是否关闭，若关闭则跳转到最后一个还存在的标签页\n      if (!this.fullPathList.includes(this.activeKey)) {\n        this.selectedLastPath()\n      }\n    },\n    selectedLastPath () {\n      this.activeKey = this.fullPathList[this.fullPathList.length - 1]\n    },\n\n    // content menu\n    closeThat (e) {\n      // 判断是否为最后一个标签页，如果是最后一个，则无法被关闭\n      if (this.fullPathList.length > 1) {\n        this.remove(e)\n      } else {\n        this.$message.info('这是最后一个标签了, 无法被关闭')\n      }\n    },\n    closeLeft (e) {\n      const currentIndex = this.fullPathList.indexOf(e)\n      if (currentIndex > 0) {\n        this.fullPathList.forEach((item, index) => {\n          if (index < currentIndex) {\n            this.remove(item)\n          }\n        })\n      } else {\n        this.$message.info('左侧没有标签')\n      }\n    },\n    closeRight (e) {\n      const currentIndex = this.fullPathList.indexOf(e)\n      if (currentIndex < (this.fullPathList.length - 1)) {\n        this.fullPathList.forEach((item, index) => {\n          if (index > currentIndex) {\n            this.remove(item)\n          }\n        })\n      } else {\n        this.$message.info('右侧没有标签')\n      }\n    },\n    closeAll (e) {\n      const currentIndex = this.fullPathList.indexOf(e)\n      this.fullPathList.forEach((item, index) => {\n        if (index !== currentIndex) {\n          this.remove(item)\n        }\n      })\n    },\n    closeMenuClick (key, route) {\n      this[key](route)\n    },\n    renderTabPaneMenu (e) {\n      return (\n        <a-menu {...{ on: { click: ({ key, item, domEvent }) => { this.closeMenuClick(key, e) } } }}>\n          <a-menu-item key=\"closeThat\">关闭当前标签</a-menu-item>\n          <a-menu-item key=\"closeRight\">关闭右侧</a-menu-item>\n          <a-menu-item key=\"closeLeft\">关闭左侧</a-menu-item>\n          <a-menu-item key=\"closeAll\">关闭全部</a-menu-item>\n        </a-menu>\n      )\n    },\n    // render\n    renderTabPane (title, keyPath) {\n      const menu = this.renderTabPaneMenu(keyPath)\n\n      return (\n        <a-dropdown overlay={menu} trigger={['contextmenu']}>\n          <span style={{ userSelect: 'none' }}>{ title }</span>\n        </a-dropdown>\n      )\n    }\n  },\n  watch: {\n    '$route': function (newVal) {\n      this.activeKey = newVal.fullPath\n      if (this.fullPathList.indexOf(newVal.fullPath) < 0) {\n        this.fullPathList.push(newVal.fullPath)\n        this.pages.push(newVal)\n      }\n    },\n    activeKey: function (newPathKey) {\n      this.$router.push({ path: newPathKey })\n    }\n  },\n  render () {\n    const { onEdit, $data: { pages } } = this\n    const panes = pages.map(page => {\n      return (\n        <a-tab-pane\n          style={{ height: 0 }}\n          tab={this.renderTabPane(page.meta.title, page.fullPath)}\n          key={page.fullPath} closable={pages.length > 1}\n        >\n        </a-tab-pane>)\n    })\n\n    return (\n      <div class=\"ant-pro-multi-tab\">\n        <div class=\"ant-pro-multi-tab-wrapper\">\n          <a-tabs\n            hideAdd\n            type={'editable-card'}\n            v-model={this.activeKey}\n            tabBarStyle={{ background: '#FFF', margin: 0, paddingLeft: '16px', paddingTop: '1px' }}\n            {...{ on: { edit: onEdit } }}>\n            {panes}\n          </a-tabs>\n        </div>\n      </div>\n    )\n  }\n}\n",{"version":3,"sources":["MultiTab.vue"],"names":[],"mappingsfile":"MultiTab.vue","sourceRoot":"src/components/MultiTab","sourcesContent":["<script>\nimport events from './events'\n\nexport default {\n  name: 'MultiTab',\n  data () {\n    return {\n      fullPathList: [],\n      pages: [],\n      activeKey: '',\n      newTabIndex: 0\n    }\n  },\n  created () {\n    // bind event\n    events.$on('open', val => {\n      if (!val) {\n        throw new Error(`multi-tab: open tab ${val} err`)\n      }\n      this.activeKey = val\n    }).$on('close', val => {\n      if (!val) {\n        this.closeThat(this.activeKey)\n        return\n      }\n      this.closeThat(val)\n    })\n\n    this.pages.push(this.$route)\n    this.fullPathList.push(this.$route.fullPath)\n    this.selectedLastPath()\n  },\n  methods: {\n    onEdit (targetKey, action) {\n      this[action](targetKey)\n    },\n    remove (targetKey) {\n      this.pages = this.pages.filter(page => page.fullPath !== targetKey)\n      this.fullPathList = this.fullPathList.filter(path => path !== targetKey)\n      // 判断当前标签是否关闭，若关闭则跳转到最后一个还存在的标签页\n      if (!this.fullPathList.includes(this.activeKey)) {\n        this.selectedLastPath()\n      }\n    },\n    selectedLastPath () {\n      this.activeKey = this.fullPathList[this.fullPathList.length - 1]\n    },\n\n    // content menu\n    closeThat (e) {\n      // 判断是否为最后一个标签页，如果是最后一个，则无法被关闭\n      if (this.fullPathList.length > 1) {\n        this.remove(e)\n      } else {\n        this.$message.info('这是最后一个标签了, 无法被关闭')\n      }\n    },\n    closeLeft (e) {\n      const currentIndex = this.fullPathList.indexOf(e)\n      if (currentIndex > 0) {\n        this.fullPathList.forEach((item, index) => {\n          if (index < currentIndex) {\n            this.remove(item)\n          }\n        })\n      } else {\n        this.$message.info('左侧没有标签')\n      }\n    },\n    closeRight (e) {\n      const currentIndex = this.fullPathList.indexOf(e)\n      if (currentIndex < (this.fullPathList.length - 1)) {\n        this.fullPathList.forEach((item, index) => {\n          if (index > currentIndex) {\n            this.remove(item)\n          }\n        })\n      } else {\n        this.$message.info('右侧没有标签')\n      }\n    },\n    closeAll (e) {\n      const currentIndex = this.fullPathList.indexOf(e)\n      this.fullPathList.forEach((item, index) => {\n        if (index !== currentIndex) {\n          this.remove(item)\n        }\n      })\n    },\n    closeMenuClick (key, route) {\n      this[key](route)\n    },\n    renderTabPaneMenu (e) {\n      return (\n        <a-menu {...{ on: { click: ({ key, item, domEvent }) => { this.closeMenuClick(key, e) } } }}>\n          <a-menu-item key=\"closeThat\">关闭当前标签</a-menu-item>\n          <a-menu-item key=\"closeRight\">关闭右侧</a-menu-item>\n          <a-menu-item key=\"closeLeft\">关闭左侧</a-menu-item>\n          <a-menu-item key=\"closeAll\">关闭全部</a-menu-item>\n        </a-menu>\n      )\n    },\n    // render\n    renderTabPane (title, keyPath) {\n      const menu = this.renderTabPaneMenu(keyPath)\n\n      return (\n        <a-dropdown overlay={menu} trigger={['contextmenu']}>\n          <span style={{ userSelect: 'none' }}>{ title }</span>\n        </a-dropdown>\n      )\n    }\n  },\n  watch: {\n    '$route': function (newVal) {\n      this.activeKey = newVal.fullPath\n      if (this.fullPathList.indexOf(newVal.fullPath) < 0) {\n        this.fullPathList.push(newVal.fullPath)\n        this.pages.push(newVal)\n      }\n    },\n    activeKey: function (newPathKey) {\n      this.$router.push({ path: newPathKey })\n    }\n  },\n  render () {\n    const { onEdit, $data: { pages } } = this\n    const panes = pages.map(page => {\n      return (\n        <a-tab-pane\n          style={{ height: 0 }}\n          tab={this.renderTabPane(page.meta.title, page.fullPath)}\n          key={page.fullPath} closable={pages.length > 1}\n        >\n        </a-tab-pane>)\n    })\n\n    return (\n      <div class=\"ant-pro-multi-tab\">\n        <div class=\"ant-pro-multi-tab-wrapper\">\n          <a-tabs\n            hideAdd\n            type={'editable-card'}\n            v-model={this.activeKey}\n            tabBarStyle={{ background: '#FFF', margin: 0, paddingLeft: '16px', paddingTop: '1px' }}\n            {...{ on: { edit: onEdit } }}>\n            {panes}\n          </a-tabs>\n        </div>\n      </div>\n    )\n  }\n}\n</script>\n"]}]}