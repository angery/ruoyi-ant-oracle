{"remainingRequest":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/views/gen/GenEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/views/gen/GenEdit.vue","mtime":1581492640535},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js","mtime":1580791766093},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/vue-loader/lib/index.js","mtime":1580791779864}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BasicInfoForm from './modules/BasicInfoForm.vue'\nimport GenInfoForm from './modules/GenInfoForm.vue'\nimport { editGen, editSaveGen } from '@/api/gen'\nexport default {\n  components: {\n    BasicInfoForm,\n    GenInfoForm\n  },\n  data () {\n    return {\n      // table\n      columns: [\n        {\n          title: '序号',\n          scopedSlots: { customRender: 'serial' }\n        },\n        {\n          title: '字段列名',\n          dataIndex: 'columnName'\n        },\n        {\n          title: '字段描述',\n          dataIndex: 'columnComment',\n          key: 'columnComment',\n          width: '10%',\n          scopedSlots: { customRender: 'columnComment' }\n        },\n        {\n          title: '物理类型',\n          dataIndex: 'columnType',\n          scopedSlots: { customRender: 'columnType' }\n        },\n        {\n          title: 'Java类型',\n          dataIndex: 'javaType',\n          key: 'javaType',\n          scopedSlots: { customRender: 'javaType' }\n        },\n        {\n          title: 'Java属性',\n          dataIndex: 'javaField',\n          key: 'javaField',\n          width: '10%',\n          scopedSlots: { customRender: 'javaField' }\n        },\n        {\n          title: '插入',\n          dataIndex: 'isInsert',\n          key: 'isInsert',\n          scopedSlots: { customRender: 'isInsert' }\n        },\n        {\n          title: '编辑',\n          dataIndex: 'isEdit',\n          key: 'isEdit',\n          scopedSlots: { customRender: 'isEdit' }\n        },\n        {\n          title: '列表',\n          dataIndex: 'isList',\n          key: 'isList',\n          scopedSlots: { customRender: 'isList' }\n        },\n        {\n          title: '查询',\n          dataIndex: 'isQuery',\n          key: 'isQuery',\n          scopedSlots: { customRender: 'isQuery' }\n        },\n        {\n          title: '查询方式',\n          dataIndex: 'queryType',\n          key: 'queryType',\n          scopedSlots: { customRender: 'queryType' }\n        },\n        {\n          title: '必填',\n          dataIndex: 'isRequired',\n          key: 'isRequired',\n          scopedSlots: { customRender: 'isRequired' }\n        },\n        {\n          title: '显示类型',\n          dataIndex: 'htmlType',\n          key: 'htmlType',\n          scopedSlots: { customRender: 'htmlType' }\n        },\n        {\n          title: '字典类型',\n          dataIndex: 'dictType',\n          key: 'dictType',\n          width: '10%',\n          scopedSlots: { customRender: 'dictType' }\n        }\n      ],\n      data: [],\n      info: {},\n      errors: [],\n      loading: false\n    }\n  },\n  beforeCreate () {\n    const { tableId } = this.$route.query\n    if (tableId) {\n      editGen({ tableId: tableId }).then(res => {\n        this.data = res.rows\n        this.info = res.data\n      })\n    }\n  },\n  methods: {\n    handleChange (value, key, column) {\n      console.log(value, key, column)\n      const newData = [...this.data]\n      const target = newData.filter(item => key === item.columnId)[0]\n      if (target) {\n        target[column] = value\n        this.data = newData\n      }\n      // console.log(this.data)\n    },\n    callback (key) {\n      // console.log(key)\n    },\n\n    // 最终全页面提交\n    validate () {\n      // eslint-disable-next-line no-debugger\n      // debugger\n      const forms = []\n      const errors = {}\n      const { $refs: { basicinfo, geninfo } } = this\n      if (basicinfo) {\n        const basicinfoForm = new Promise((resolve, reject) => {\n          basicinfo.form.validateFields((err, values) => {\n            if (err) {\n              reject(err)\n              return\n            }\n            resolve(values)\n          })\n        })\n        forms.push(basicinfoForm)\n        Object.assign(errors, basicinfo.form.getFieldsError())\n      }\n      if (geninfo) {\n        const geninfoForm = new Promise((resolve, reject) => {\n          geninfo.form.validateFields((err, values) => {\n            if (err) {\n              reject(err)\n              return\n            }\n            resolve(values)\n          })\n        })\n        forms.push(geninfoForm)\n        Object.assign(errors, geninfo.form.getFieldsError())\n      }\n\n      // clean this.errors\n      this.errors = []\n      Promise.all(forms).then(values => {\n        const genTable = Object.assign({}, this.info)\n        values.forEach(i => {\n          Object.assign(genTable, i)\n        })\n        this.info = Object.assign({}, genTable)\n        genTable.columns = this.data\n        genTable.params = { treeCode: genTable.treeCode, treeName: genTable.treeName, treeParentCode: genTable.treeParentCode }\n        this.loading = true\n        editSaveGen(genTable).then(res => {\n          if (res.code === 0) {\n            this.$message.success('保存成功')\n            this.rollback()\n          } else {\n            this.$message.success(res.msg)\n          }\n        }).catch(() => {\n          this.$message.error('系统错误，请稍后再试')\n        }).finally(() => {\n          this.loading = false\n        })\n        console.log('received values of form:', genTable)\n      }).catch(() => {\n        const tmp = { ...errors }\n        this.errorList(tmp)\n      })\n    },\n    errorList (errors) {\n      if (!errors || errors.length === 0) {\n        return\n      }\n      this.errors = Object.keys(errors)\n        .filter(key => errors[key])\n        .map(key => ({\n          key: key,\n          message: errors[key][0]\n        }))\n      console.log(this.errors)\n      // 这里只输出第一个错误,需要自己改\n      this.$message.error(this.errors[0].message || '配置错误')\n    },\n    rollback () {\n      this.$router.push('/tool/genList')\n    }\n  }\n}\n",{"version":3,"sources":["GenEdit.vue"],"names":[],"mappingsfile":"GenEdit.vue","sourceRoot":"src/views/gen","sourcesContent":["<template>\n  <a-card :bordered=\"false\">\n    <a-form @submit=\"handleSubmit\" :form=\"form\">\n      <a-tabs @change=\"callback\" defaultActiveKey=\"2\" type=\"card\">\n        <a-tab-pane tab=\"基本信息\" key=\"1\">\n          <basic-info-form ref=\"basicinfo\" :showSubmit=\"false\" :info=\"info\" />\n        </a-tab-pane>\n        <a-tab-pane tab=\"字段信息\" key=\"2\">\n          <a-table\n            :pagination=\"false\"\n            :columns=\"columns\"\n            :dataSource=\"data\"\n          >\n            <span slot=\"serial\" slot-scope=\"text, record, index\">\n              {{ index + 1 }}\n            </span>\n            <template slot=\"javaType\" slot-scope=\"text, record\">\n              <a-select :value=\"text\" style=\"width: 120px\" @change=\"e => handleChange(e, record.columnId, 'javaType')\">\n                <a-select-option value=\"Long\">Long</a-select-option>\n                <a-select-option value=\"String\">String</a-select-option>\n                <a-select-option value=\"Ingeter\">Ingeter</a-select-option>\n                <a-select-option value=\"Double\">Double</a-select-option>\n                <a-select-option value=\"BigDecimal\">BigDecimal</a-select-option>\n                <a-select-option value=\"Date\">Date</a-select-option>\n              </a-select>\n            </template>\n            <template v-for=\"(coli, i) in ['columnComment','javaField','dictType']\" :slot=\"coli\" slot-scope=\"text, record\">\n              <a-input\n                :key=\"coli\"\n                style=\"margin: -5px 0\"\n                :value=\"text\"\n                @change=\"e => handleChange(e.target.value, record.columnId, coli)\"\n              />\n            </template>\n            <template v-for=\"(col, i) in ['isInsert','isEdit','isList','isQuery','isRequired']\" :slot=\"col\" slot-scope=\"text, record\">\n              <a-checkbox :key=\"col\" :defaultChecked=\"text==='1'\" @change=\"e => handleChange(e.target.checked?'1':'0', record.columnId, col)\"></a-checkbox>\n            </template>\n\n            <template slot=\"queryType\" slot-scope=\"text,record\">\n              <a-select :value=\"text\" style=\"width: 100px\" @change=\"e => handleChange(e, record.columnId, 'queryType')\">\n                <a-select-option value=\"EQ\">=</a-select-option>\n                <a-select-option value=\"NE\">!=</a-select-option>\n                <a-select-option value=\"GT\">&gt;</a-select-option>\n                <a-select-option value=\"GTE\">&gt;=</a-select-option>\n                <a-select-option value=\"LT\">&gt;</a-select-option>\n                <a-select-option value=\"LTE\">&gt;=</a-select-option>\n                <a-select-option value=\"LIKE\">LIKE</a-select-option>\n                <a-select-option value=\"BETWEEN\">BETWEEN</a-select-option>\n              </a-select>\n            </template>\n            <template slot=\"htmlType\" slot-scope=\"text,record\">\n              <a-select :value=\"text\" style=\"width: 100px\" @change=\"e => handleChange(e, record.columnId, 'htmlType')\">\n                <a-select-option value=\"input\">文本框</a-select-option>\n                <a-select-option value=\"textarea\">文本域</a-select-option>\n                <a-select-option value=\"select\">下拉框</a-select-option>\n                <a-select-option value=\"radio\">单选框</a-select-option>\n                <a-select-option value=\"checkbox\">复选框</a-select-option>\n                <a-select-option value=\"datetime\">日期控件</a-select-option>\n              </a-select>\n            </template>\n          </a-table>\n          <br>\n        </a-tab-pane>\n        <a-tab-pane tab=\"生成信息\" key=\"3\">\n          <gen-info-form ref=\"geninfo\" :showSubmit=\"false\" :info=\"info\" />\n        </a-tab-pane>\n      </a-tabs>\n      <a-form-item\n        :wrapperCol=\"{ span: 24 }\"\n        style=\"text-align: center\"\n      >\n        <a-button icon=\"check\" type=\"primary\" @click=\"validate\" :loading=\"loading\">提交</a-button>\n        <a-button icon=\"rollback\" style=\"margin-left: 8px\" @click=\"rollback\">关闭</a-button>\n      </a-form-item>\n    </a-form>\n  </a-card>\n</template>\n<script>\nimport BasicInfoForm from './modules/BasicInfoForm.vue'\nimport GenInfoForm from './modules/GenInfoForm.vue'\nimport { editGen, editSaveGen } from '@/api/gen'\nexport default {\n  components: {\n    BasicInfoForm,\n    GenInfoForm\n  },\n  data () {\n    return {\n      // table\n      columns: [\n        {\n          title: '序号',\n          scopedSlots: { customRender: 'serial' }\n        },\n        {\n          title: '字段列名',\n          dataIndex: 'columnName'\n        },\n        {\n          title: '字段描述',\n          dataIndex: 'columnComment',\n          key: 'columnComment',\n          width: '10%',\n          scopedSlots: { customRender: 'columnComment' }\n        },\n        {\n          title: '物理类型',\n          dataIndex: 'columnType',\n          scopedSlots: { customRender: 'columnType' }\n        },\n        {\n          title: 'Java类型',\n          dataIndex: 'javaType',\n          key: 'javaType',\n          scopedSlots: { customRender: 'javaType' }\n        },\n        {\n          title: 'Java属性',\n          dataIndex: 'javaField',\n          key: 'javaField',\n          width: '10%',\n          scopedSlots: { customRender: 'javaField' }\n        },\n        {\n          title: '插入',\n          dataIndex: 'isInsert',\n          key: 'isInsert',\n          scopedSlots: { customRender: 'isInsert' }\n        },\n        {\n          title: '编辑',\n          dataIndex: 'isEdit',\n          key: 'isEdit',\n          scopedSlots: { customRender: 'isEdit' }\n        },\n        {\n          title: '列表',\n          dataIndex: 'isList',\n          key: 'isList',\n          scopedSlots: { customRender: 'isList' }\n        },\n        {\n          title: '查询',\n          dataIndex: 'isQuery',\n          key: 'isQuery',\n          scopedSlots: { customRender: 'isQuery' }\n        },\n        {\n          title: '查询方式',\n          dataIndex: 'queryType',\n          key: 'queryType',\n          scopedSlots: { customRender: 'queryType' }\n        },\n        {\n          title: '必填',\n          dataIndex: 'isRequired',\n          key: 'isRequired',\n          scopedSlots: { customRender: 'isRequired' }\n        },\n        {\n          title: '显示类型',\n          dataIndex: 'htmlType',\n          key: 'htmlType',\n          scopedSlots: { customRender: 'htmlType' }\n        },\n        {\n          title: '字典类型',\n          dataIndex: 'dictType',\n          key: 'dictType',\n          width: '10%',\n          scopedSlots: { customRender: 'dictType' }\n        }\n      ],\n      data: [],\n      info: {},\n      errors: [],\n      loading: false\n    }\n  },\n  beforeCreate () {\n    const { tableId } = this.$route.query\n    if (tableId) {\n      editGen({ tableId: tableId }).then(res => {\n        this.data = res.rows\n        this.info = res.data\n      })\n    }\n  },\n  methods: {\n    handleChange (value, key, column) {\n      console.log(value, key, column)\n      const newData = [...this.data]\n      const target = newData.filter(item => key === item.columnId)[0]\n      if (target) {\n        target[column] = value\n        this.data = newData\n      }\n      // console.log(this.data)\n    },\n    callback (key) {\n      // console.log(key)\n    },\n\n    // 最终全页面提交\n    validate () {\n      // eslint-disable-next-line no-debugger\n      // debugger\n      const forms = []\n      const errors = {}\n      const { $refs: { basicinfo, geninfo } } = this\n      if (basicinfo) {\n        const basicinfoForm = new Promise((resolve, reject) => {\n          basicinfo.form.validateFields((err, values) => {\n            if (err) {\n              reject(err)\n              return\n            }\n            resolve(values)\n          })\n        })\n        forms.push(basicinfoForm)\n        Object.assign(errors, basicinfo.form.getFieldsError())\n      }\n      if (geninfo) {\n        const geninfoForm = new Promise((resolve, reject) => {\n          geninfo.form.validateFields((err, values) => {\n            if (err) {\n              reject(err)\n              return\n            }\n            resolve(values)\n          })\n        })\n        forms.push(geninfoForm)\n        Object.assign(errors, geninfo.form.getFieldsError())\n      }\n\n      // clean this.errors\n      this.errors = []\n      Promise.all(forms).then(values => {\n        const genTable = Object.assign({}, this.info)\n        values.forEach(i => {\n          Object.assign(genTable, i)\n        })\n        this.info = Object.assign({}, genTable)\n        genTable.columns = this.data\n        genTable.params = { treeCode: genTable.treeCode, treeName: genTable.treeName, treeParentCode: genTable.treeParentCode }\n        this.loading = true\n        editSaveGen(genTable).then(res => {\n          if (res.code === 0) {\n            this.$message.success('保存成功')\n            this.rollback()\n          } else {\n            this.$message.success(res.msg)\n          }\n        }).catch(() => {\n          this.$message.error('系统错误，请稍后再试')\n        }).finally(() => {\n          this.loading = false\n        })\n        console.log('received values of form:', genTable)\n      }).catch(() => {\n        const tmp = { ...errors }\n        this.errorList(tmp)\n      })\n    },\n    errorList (errors) {\n      if (!errors || errors.length === 0) {\n        return\n      }\n      this.errors = Object.keys(errors)\n        .filter(key => errors[key])\n        .map(key => ({\n          key: key,\n          message: errors[key][0]\n        }))\n      console.log(this.errors)\n      // 这里只输出第一个错误,需要自己改\n      this.$message.error(this.errors[0].message || '配置错误')\n    },\n    rollback () {\n      this.$router.push('/tool/genList')\n    }\n  }\n}\n</script>\n"]}]}