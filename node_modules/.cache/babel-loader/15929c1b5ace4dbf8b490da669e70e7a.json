{"remainingRequest":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/utils/treeutil.js","dependencies":[{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/utils/treeutil.js","mtime":1581494697536},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js","mtime":1580791766093},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1580791774215}],"contextDependencies":[],"result":["/**\n * 构造树型结构数据\n * @param {*} source 数据源\n * @param {*} id id字段 默认 'id'\n * @param {*} parentId 父节点字段 默认 'parentId'\n * @param {*} children 孩子节点字段 默认 'children'\n * @param {*} rootId 根Id 默认 0\n */\nexport function treeData(source, id, parentId, children, rootId) {\n  id = id || 'id';\n  parentId = parentId || 'parentId';\n  children = children || 'children';\n  rootId = rootId || '0';\n  var cloneData = JSON.parse(JSON.stringify(source)); // 对源数据深度克隆\n\n  return cloneData.filter(function (father) {\n    var branchArr = cloneData.filter(function (child) {\n      return father[id] === child[parentId];\n    }); // 返回每一项的子级数组\n\n    branchArr.length > 0 ? father[children] = branchArr : delete father[children]; // 如果存在子级，则给父级添加一个children属性，并赋值\n\n    return father[parentId] === rootId; // 返回第一层\n  });\n}",{"version":3,"sources":["/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/utils/treeutil.js"],"names":["treeData","source","id","parentId","children","rootId","cloneData","JSON","parse","stringify","filter","father","branchArr","child","length"],"mappings":"AAAA;;;;;;;;AAQA,OAAO,SAASA,QAAT,CAAmBC,MAAnB,EAA2BC,EAA3B,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmDC,MAAnD,EAA2D;AAChEH,EAAAA,EAAE,GAAGA,EAAE,IAAI,IAAX;AACAC,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,UAAvB;AACAC,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,UAAvB;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAAI,GAAnB;AACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,MAAf,CAAX,CAAlB,CALgE,CAKZ;;AACpD,SAAOK,SAAS,CAACI,MAAV,CAAiB,UAAAC,MAAM,EAAI;AAChC,QAAMC,SAAS,GAAGN,SAAS,CAACI,MAAV,CAAiB,UAAAG,KAAK;AAAA,aAAIF,MAAM,CAACT,EAAD,CAAN,KAAeW,KAAK,CAACV,QAAD,CAAxB;AAAA,KAAtB,CAAlB,CADgC,CAC2C;;AAC3ES,IAAAA,SAAS,CAACE,MAAV,GAAmB,CAAnB,GAAuBH,MAAM,CAACP,QAAD,CAAN,GAAmBQ,SAA1C,GAAsD,OAAOD,MAAM,CAACP,QAAD,CAAnE,CAFgC,CAE6C;;AAC7E,WAAOO,MAAM,CAACR,QAAD,CAAN,KAAqBE,MAA5B,CAHgC,CAGG;AACpC,GAJM,CAAP;AAKD","sourcesContent":["/**\n * 构造树型结构数据\n * @param {*} source 数据源\n * @param {*} id id字段 默认 'id'\n * @param {*} parentId 父节点字段 默认 'parentId'\n * @param {*} children 孩子节点字段 默认 'children'\n * @param {*} rootId 根Id 默认 0\n */\nexport function treeData (source, id, parentId, children, rootId) {\n  id = id || 'id'\n  parentId = parentId || 'parentId'\n  children = children || 'children'\n  rootId = rootId || '0'\n  const cloneData = JSON.parse(JSON.stringify(source))// 对源数据深度克隆\n  return cloneData.filter(father => {\n    const branchArr = cloneData.filter(child => father[id] === child[parentId])// 返回每一项的子级数组\n    branchArr.length > 0 ? father[children] = branchArr : delete father[children]// 如果存在子级，则给父级添加一个children属性，并赋值\n    return father[parentId] === rootId // 返回第一层\n  })\n}\n"]}]}