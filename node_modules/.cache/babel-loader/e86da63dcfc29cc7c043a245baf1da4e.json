{"remainingRequest":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/utils/dict.js","dependencies":[{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/utils/dict.js","mtime":1581492640516},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js","mtime":1580791766093},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1580791774215}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport { axios } from '@/utils/request';\nvar api = {\n  dictData: '/system/dict/data' // 字典两种用法，各有优缺点\n  // 1.Map 需要数组的时候构造数组不方便\n  // operTypeMap = await getDictMap('sys_oper_type')\n  // this.operTypeMap = operTypeMap\n  // this.operTypeMap.forEach((value, key, mymap) => {\n  //   this.businessTypes.push({ code: key, label: value })\n  // })\n  // 2.数组 在modal调用没有map方便\n  // this.businessTypes = await getDictArray('sys_oper_type')\n  // this.businessTypes.map(d => {\n  //   operTypeMap[d.dictValue] = { text: d.dictLabel }\n  // })\n  // this.operTypeMap = operTypeMap\n\n  /**\n   * 根据类型获取字典内容 返回Map\n   * @param {String} dictType 字典类型\n   */\n\n};\nexport function getDictMap(dictType) {\n  return new Promise(function (resolve, reject) {\n    // ajax\n    axios({\n      url: api.dictData + '/type',\n      method: 'get',\n      params: {\n        'dictType': dictType\n      }\n    }).then(function (res) {\n      var map = new Map();\n      res.map(function (d) {\n        map.set(d.dictValue, d.dictLabel);\n      });\n      resolve(map);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n/**\n * 根据类型获取字典内容 返回数组\n * @param {String} dictType 字典类型\n */\n\nexport function getDictArray(dictType) {\n  return axios({\n    url: api.dictData + '/type',\n    method: 'get',\n    params: {\n      'dictType': dictType\n    }\n  });\n}",{"version":3,"sources":["/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/utils/dict.js"],"names":["axios","api","dictData","getDictMap","dictType","Promise","resolve","reject","url","method","params","then","res","map","Map","d","set","dictValue","dictLabel","catch","err","getDictArray"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,iBAAtB;AACA,IAAMC,GAAG,GAAG;AACVC,EAAAA,QAAQ,EAAE,mBADA,CAIZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAlBY,CAAZ;AAsBA,OAAO,SAASC,UAAT,CAAqBC,QAArB,EAA+B;AACpC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACxC;AACEP,IAAAA,KAAK,CAAC;AACJQ,MAAAA,GAAG,EAAEP,GAAG,CAACC,QAAJ,GAAe,OADhB;AAEJO,MAAAA,MAAM,EAAE,KAFJ;AAGJC,MAAAA,MAAM,EAAE;AAAE,oBAAYN;AAAd;AAHJ,KAAD,CAAL,CAIGO,IAJH,CAIQ,UAAAC,GAAG,EAAI;AACb,UAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;AACAF,MAAAA,GAAG,CAACC,GAAJ,CAAQ,UAAAE,CAAC,EAAI;AACXF,QAAAA,GAAG,CAACG,GAAJ,CAAQD,CAAC,CAACE,SAAV,EAAqBF,CAAC,CAACG,SAAvB;AACD,OAFD;AAGAZ,MAAAA,OAAO,CAACO,GAAD,CAAP;AACD,KAVD,EAUGM,KAVH,CAUS,UAAAC,GAAG,EAAI;AACdb,MAAAA,MAAM,CAACa,GAAD,CAAN;AACD,KAZD;AAaD,GAfM,CAAP;AAgBD;AACD;;;;;AAIA,OAAO,SAASC,YAAT,CAAuBjB,QAAvB,EAAiC;AACtC,SAAOJ,KAAK,CAAC;AACXQ,IAAAA,GAAG,EAAEP,GAAG,CAACC,QAAJ,GAAe,OADT;AAEXO,IAAAA,MAAM,EAAE,KAFG;AAGXC,IAAAA,MAAM,EAAE;AAAE,kBAAYN;AAAd;AAHG,GAAD,CAAZ;AAKD","sourcesContent":["import { axios } from '@/utils/request'\nconst api = {\n  dictData: '/system/dict/data'\n}\n\n// 字典两种用法，各有优缺点\n// 1.Map 需要数组的时候构造数组不方便\n// operTypeMap = await getDictMap('sys_oper_type')\n// this.operTypeMap = operTypeMap\n// this.operTypeMap.forEach((value, key, mymap) => {\n//   this.businessTypes.push({ code: key, label: value })\n// })\n// 2.数组 在modal调用没有map方便\n// this.businessTypes = await getDictArray('sys_oper_type')\n// this.businessTypes.map(d => {\n//   operTypeMap[d.dictValue] = { text: d.dictLabel }\n// })\n// this.operTypeMap = operTypeMap\n\n/**\n * 根据类型获取字典内容 返回Map\n * @param {String} dictType 字典类型\n */\nexport function getDictMap (dictType) {\n  return new Promise((resolve, reject) => {\n  // ajax\n    axios({\n      url: api.dictData + '/type',\n      method: 'get',\n      params: { 'dictType': dictType }\n    }).then(res => {\n      const map = new Map()\n      res.map(d => {\n        map.set(d.dictValue, d.dictLabel)\n      })\n      resolve(map)\n    }).catch(err => {\n      reject(err)\n    })\n  })\n}\n/**\n * 根据类型获取字典内容 返回数组\n * @param {String} dictType 字典类型\n */\nexport function getDictArray (dictType) {\n  return axios({\n    url: api.dictData + '/type',\n    method: 'get',\n    params: { 'dictType': dictType }\n  })\n}\n"]}]}