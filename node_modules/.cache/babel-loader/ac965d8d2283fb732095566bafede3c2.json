{"remainingRequest":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/utils/download.js","dependencies":[{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/utils/download.js","mtime":1581492640516},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/cache-loader/dist/cjs.js","mtime":1580791779218},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/babel-loader/lib/index.js","mtime":1580791766093},{"path":"/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1580791774215}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport { pureAxios, axios } from '@/utils/request';\nvar downloadUrl = '/system/common/download';\nvar mimeMap = {\n  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  zip: 'application/zip',\n  xml: 'application/xml'\n};\nexport function exportExcel(url, params) {\n  axios({\n    url: url,\n    method: 'post',\n    params: params\n  }).then(function (res) {\n    if (res.code === 0) {\n      downloadXlsx(res.msg);\n    }\n  });\n}\n/**\n * 下载.xlsx文件\n * @param {String} filename 文件名\n */\n\nexport function downloadXlsx(filename) {\n  pureAxios({\n    url: downloadUrl,\n    method: 'get',\n    params: {\n      fileName: filename,\n      delete: true\n    },\n    responseType: 'blob'\n  }).then(function (res) {\n    resolveBlob(res, mimeMap.xlsx);\n  });\n}\n/**\n * 代码生成并下载为zip\n * @param {String} url 链接\n * @param {String} tables 表名\n */\n\nexport function genCodeZip(url, tables) {\n  pureAxios({\n    url: url,\n    method: 'get',\n    params: {\n      tables: tables\n    },\n    responseType: 'blob'\n  }).then(function (res) {\n    resolveBlob(res, mimeMap.zip);\n  });\n}\n/**\n * 解析blob响应内容并下载\n * @param {*} res blob响应内容\n * @param {String} mimeType MIME类型\n */\n\nexport function resolveBlob(res, mimeType) {\n  var aLink = document.createElement('a');\n  var blob = new Blob([res.data], {\n    type: mimeType\n  }); // //从response的headers中获取filename, 后端response.setHeader(\"Content-disposition\", \"attachment; filename=xxxx.docx\") 设置的文件名;\n\n  var patt = new RegExp('filename=([^;]+\\\\.[^\\\\.;]+);*');\n  var contentDisposition = decodeURI(res.headers['content-disposition']);\n  var result = patt.exec(contentDisposition);\n  var fileName = result[1];\n  aLink.href = URL.createObjectURL(blob);\n  aLink.setAttribute('download', fileName); // 设置下载文件名称\n\n  document.body.appendChild(aLink);\n  aLink.click();\n  document.body.removeChild(aLink);\n  window.URL.revokeObjectURL(aLink.href);\n}",{"version":3,"sources":["/Users/medo/Downloads/code/ruoyi-cloud-view/ruoyi-ant/src/utils/download.js"],"names":["pureAxios","axios","downloadUrl","mimeMap","xlsx","zip","xml","exportExcel","url","params","method","then","res","code","downloadXlsx","msg","filename","fileName","delete","responseType","resolveBlob","genCodeZip","tables","mimeType","aLink","document","createElement","blob","Blob","data","type","patt","RegExp","contentDisposition","decodeURI","headers","result","exec","href","URL","createObjectURL","setAttribute","body","appendChild","click","removeChild","window","revokeObjectURL"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,KAApB,QAAiC,iBAAjC;AAEA,IAAMC,WAAW,GAAG,yBAApB;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,mEADQ;AAEdC,EAAAA,GAAG,EAAE,iBAFS;AAGdC,EAAAA,GAAG,EAAE;AAHS,CAAhB;AAMA,OAAO,SAASC,WAAT,CAAsBC,GAAtB,EAA2BC,MAA3B,EAAmC;AACxCR,EAAAA,KAAK,CAAC;AACJO,IAAAA,GAAG,EAAEA,GADD;AAEJE,IAAAA,MAAM,EAAE,MAFJ;AAGJD,IAAAA,MAAM,EAAEA;AAHJ,GAAD,CAAL,CAIGE,IAJH,CAIQ,UAAAC,GAAG,EAAI;AACb,QAAIA,GAAG,CAACC,IAAJ,KAAa,CAAjB,EAAoB;AAClBC,MAAAA,YAAY,CAACF,GAAG,CAACG,GAAL,CAAZ;AACD;AACF,GARD;AASD;AAED;;;;;AAIA,OAAO,SAASD,YAAT,CAAuBE,QAAvB,EAAiC;AACtChB,EAAAA,SAAS,CAAC;AACRQ,IAAAA,GAAG,EAAEN,WADG;AAERQ,IAAAA,MAAM,EAAE,KAFA;AAGRD,IAAAA,MAAM,EAAE;AAAEQ,MAAAA,QAAQ,EAAED,QAAZ;AAAsBE,MAAAA,MAAM,EAAE;AAA9B,KAHA;AAIRC,IAAAA,YAAY,EAAE;AAJN,GAAD,CAAT,CAKGR,IALH,CAKQ,UAAAC,GAAG,EAAI;AACbQ,IAAAA,WAAW,CAACR,GAAD,EAAMT,OAAO,CAACC,IAAd,CAAX;AACD,GAPD;AAQD;AAED;;;;;;AAKA,OAAO,SAASiB,UAAT,CAAqBb,GAArB,EAA0Bc,MAA1B,EAAkC;AACvCtB,EAAAA,SAAS,CAAC;AACRQ,IAAAA,GAAG,EAAEA,GADG;AAERE,IAAAA,MAAM,EAAE,KAFA;AAGRD,IAAAA,MAAM,EAAE;AAAEa,MAAAA,MAAM,EAAEA;AAAV,KAHA;AAIRH,IAAAA,YAAY,EAAE;AAJN,GAAD,CAAT,CAKGR,IALH,CAKQ,UAAAC,GAAG,EAAI;AACbQ,IAAAA,WAAW,CAACR,GAAD,EAAMT,OAAO,CAACE,GAAd,CAAX;AACD,GAPD;AAQD;AAED;;;;;;AAKA,OAAO,SAASe,WAAT,CAAsBR,GAAtB,EAA2BW,QAA3B,EAAqC;AAC1C,MAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAd;AACA,MAAIC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAChB,GAAG,CAACiB,IAAL,CAAT,EAAqB;AAAEC,IAAAA,IAAI,EAAEP;AAAR,GAArB,CAAX,CAF0C,CAG1C;;AACA,MAAIQ,IAAI,GAAG,IAAIC,MAAJ,CAAW,+BAAX,CAAX;AACA,MAAIC,kBAAkB,GAAGC,SAAS,CAACtB,GAAG,CAACuB,OAAJ,CAAY,qBAAZ,CAAD,CAAlC;AACA,MAAIC,MAAM,GAAGL,IAAI,CAACM,IAAL,CAAUJ,kBAAV,CAAb;AACA,MAAIhB,QAAQ,GAAGmB,MAAM,CAAC,CAAD,CAArB;AACAZ,EAAAA,KAAK,CAACc,IAAN,GAAaC,GAAG,CAACC,eAAJ,CAAoBb,IAApB,CAAb;AACAH,EAAAA,KAAK,CAACiB,YAAN,CAAmB,UAAnB,EAA+BxB,QAA/B,EAT0C,CASD;;AACzCQ,EAAAA,QAAQ,CAACiB,IAAT,CAAcC,WAAd,CAA0BnB,KAA1B;AACAA,EAAAA,KAAK,CAACoB,KAAN;AACAnB,EAAAA,QAAQ,CAACiB,IAAT,CAAcG,WAAd,CAA0BrB,KAA1B;AACAsB,EAAAA,MAAM,CAACP,GAAP,CAAWQ,eAAX,CAA2BvB,KAAK,CAACc,IAAjC;AACD","sourcesContent":["import { pureAxios, axios } from '@/utils/request'\n\nconst downloadUrl = '/system/common/download'\n\nconst mimeMap = {\n  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  zip: 'application/zip',\n  xml: 'application/xml'\n}\n\nexport function exportExcel (url, params) {\n  axios({\n    url: url,\n    method: 'post',\n    params: params\n  }).then(res => {\n    if (res.code === 0) {\n      downloadXlsx(res.msg)\n    }\n  })\n}\n\n/**\n * 下载.xlsx文件\n * @param {String} filename 文件名\n */\nexport function downloadXlsx (filename) {\n  pureAxios({\n    url: downloadUrl,\n    method: 'get',\n    params: { fileName: filename, delete: true },\n    responseType: 'blob'\n  }).then(res => {\n    resolveBlob(res, mimeMap.xlsx)\n  })\n}\n\n/**\n * 代码生成并下载为zip\n * @param {String} url 链接\n * @param {String} tables 表名\n */\nexport function genCodeZip (url, tables) {\n  pureAxios({\n    url: url,\n    method: 'get',\n    params: { tables: tables },\n    responseType: 'blob'\n  }).then(res => {\n    resolveBlob(res, mimeMap.zip)\n  })\n}\n\n/**\n * 解析blob响应内容并下载\n * @param {*} res blob响应内容\n * @param {String} mimeType MIME类型\n */\nexport function resolveBlob (res, mimeType) {\n  const aLink = document.createElement('a')\n  var blob = new Blob([res.data], { type: mimeType })\n  // //从response的headers中获取filename, 后端response.setHeader(\"Content-disposition\", \"attachment; filename=xxxx.docx\") 设置的文件名;\n  var patt = new RegExp('filename=([^;]+\\\\.[^\\\\.;]+);*')\n  var contentDisposition = decodeURI(res.headers['content-disposition'])\n  var result = patt.exec(contentDisposition)\n  var fileName = result[1]\n  aLink.href = URL.createObjectURL(blob)\n  aLink.setAttribute('download', fileName) // 设置下载文件名称\n  document.body.appendChild(aLink)\n  aLink.click()\n  document.body.removeChild(aLink)\n  window.URL.revokeObjectURL(aLink.href)\n}\n"]}]}